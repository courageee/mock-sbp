from fastapi import FastAPI
from pydantic import BaseModel
from typing import Optional
import random
import time
import uuid

app = FastAPI(title="Mock SBP API")

# –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
class TransferRequest(BaseModel):
    from_account: str
    to_account: str
    amount: float
    purpose: Optional[str] = None

@app.get("/")
async def index():
    return {"message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ mock API –°–ë–ü!"}

# üì• –¢–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
@app.get("/tariff")
async def get_tariff(amount: float = 0):
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç–≤–µ—Ç–∞
    time.sleep(random.uniform(0.1, 0.2))

    if amount < 1000:
        tariff = 0
    elif amount < 10000:
        tariff = amount * 0.005
    else:
        tariff = amount * 0.01

    return {
        "amount": amount,
        "tariff": round(tariff, 2),
        "currency": "RUB"
    }

# üí∏ –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
@app.post("/transfer")
async def transfer_funds(req: TransferRequest):
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É
    time.sleep(random.uniform(0.1, 0.3))

    # 10% —à–∞–Ω—Å –æ—Ç–∫–∞–∑–∞
    if random.random() < 0.1:
        return {
            "status": "declined",
            "reason": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
            "code": "DECLINE_FUNDS"
        }

    transaction_id = str(uuid.uuid4())
    return {
        "status": "success",
        "transaction_id": transaction_id,
        "from": req.from_account,
        "to": req.to_account,
        "amount": req.amount,
        "currency": "RUB"
    }

# üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
@app.get("/balance/{account_id}")
async def get_balance(account_id: str):
    balance = round(random.uniform(1000, 100000), 2)
    return {
        "account_id": account_id,
        "balance": balance,
        "currency": "RUB"
    }
